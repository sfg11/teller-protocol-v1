{
  "address": "0x07B24e3192B05FE37842F5C71aEEa7d726a3caD5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "addChainlinkAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        }
      ],
      "name": "getChainlinkAggregatorFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "agg",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "found",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "inverse",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isChainlinkTokenSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        }
      ],
      "name": "removeChainlinkAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "artifactName": "ChainlinkAggFacet",
  "transactionHash": "0x62cc205e0cd89115c4710646552c511941b17e6fcf0e0ec09a3e38a6cdb3b267",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x07B24e3192B05FE37842F5C71aEEa7d726a3caD5",
    "transactionIndex": 0,
    "gasUsed": "594205",
    "logsBloom": "0x
    "blockHash": "0x1cd7217394d2d3cf56c56ef75da80887292634e84c0bebde9f451321109962bb",
    "transactionHash": "0x62cc205e0cd89115c4710646552c511941b17e6fcf0e0ec09a3e38a6cdb3b267",
    "logs": [],
    "blockNumber": 25347860,
    "cumulativeGasUsed": "594205",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7646e63ef89d3687a032672685314b8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"addChainlinkAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"getChainlinkAggregatorFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agg\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"found\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inverse\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isChainlinkTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"removeChainlinkAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addChainlinkAggregator(address,address,address)\":{\"params\":{\"aggregator\":\"Price aggregator address.\",\"dst\":\"Destination token address.\",\"src\":\"Source token address.\"}},\"getChainlinkAggregatorFor(address,address)\":{\"params\":{\"dst\":\"Destination token address.\",\"src\":\"Source token address.\"},\"returns\":{\"agg\":\"The Chainlink Aggregator address.\",\"found\":\"whether or not the ChainlinkAggregator exists.\",\"inverse\":\"whether or not the values from the Aggregator should be considered inverted.\"}},\"isChainlinkTokenSupported(address)\":{\"details\":\"Checks if a token address is supported by Chainlink (has a pair aggregator).\",\"params\":{\"token\":\"Token address to check if is supported.\"},\"returns\":{\"_0\":\"isSupported_ true if there is at least 1 pair aggregator for {token}\"}},\"removeChainlinkAggregator(address,address)\":{\"params\":{\"dst\":\"Destination token address.\",\"src\":\"Source token address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addChainlinkAggregator(address,address,address)\":{\"notice\":\"It allows for additional Chainlink Aggregators to be supported.\"},\"getChainlinkAggregatorFor(address,address)\":{\"notice\":\"It grabs the Chainlink Aggregator contract address for the token pair if it is supported.\"},\"removeChainlinkAggregator(address,address)\":{\"notice\":\"It removes support for a Chainlink Aggregator pair.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/price-aggregator/chainlink/ChainlinkAggFacet.sol\":\"ChainlinkAggFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x4878ef6c288f4cef3c2a288d32cc548c648831cc55503ad3d9a581ed3b93aad9\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/roles/RolesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AccessControlStorageLib, AccessControlStorage } from \\\"../storage.sol\\\";\\n\\nlibrary RolesLib {\\n    function s() private pure returns (AccessControlStorage storage) {\\n        return AccessControlStorageLib.store();\\n    }\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @notice Checks if an account has a specific role.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return s().roles[role][account];\\n    }\\n\\n    /**\\n     * @dev Gives an account a new role.\\n     * @dev Should only use when circumventing admin checking.\\n     * @dev If account already has the role, no event is emitted.\\n     * @param role Encoding of the role to give.\\n     * @param account Address to give the {role} to.\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) return;\\n        s().roles[role][account] = true;\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Removes a role from an account.\\n     * @dev Should only use when circumventing admin checking.\\n     * @dev If account does not already have the role, no event is emitted.\\n     * @param role Encoding of the role to remove.\\n     * @param account Address to remove the {role} from.\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) return;\\n        s().roles[role][account] = false;\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x36d0f5db441d2c3db7ee04d84c88ce9b14251cff4387702e96965c51acd1bc84\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/roles/RolesMods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { RolesLib } from \\\"./RolesLib.sol\\\";\\n\\nabstract contract RolesMods {\\n    /**\\n     * @notice Requires that the {account} has {role}\\n     * @param role Encoding of the role to check.\\n     * @param account Address to check the {role} for.\\n     */\\n    modifier authorized(bytes32 role, address account) {\\n        require(\\n            RolesLib.hasRole(role, account),\\n            \\\"AccessControl: not authorized\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x25eeaba823d4fc9c52d82a77cfdb409550ad985fc49b30a5560c1f313c1ca905\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct AccessControlStorage {\\n    mapping(bytes32 => mapping(address => bool)) roles;\\n    mapping(address => address) owners;\\n    mapping(bytes32 => bool) entered;\\n}\\n\\nbytes32 constant ACCESS_CONTROL_POS = keccak256(\\n    \\\"teller.access_control.storage\\\"\\n);\\n\\nlibrary AccessControlStorageLib {\\n    function store() internal pure returns (AccessControlStorage storage s) {\\n        bytes32 pos = ACCESS_CONTROL_POS;\\n        assembly {\\n            s.slot := pos\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf667fb8d6beb59fc6f37d60ada6b811b5861512fedc661c483b9eca042e96112\",\"license\":\"MIT\"},\"contracts/price-aggregator/chainlink/ChainlinkAggFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport { RolesMods } from \\\"../../contexts2/access-control/roles/RolesMods.sol\\\";\\nimport { ADMIN } from \\\"../../shared/roles.sol\\\";\\n\\n// Libraries\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { ChainlinkLib } from \\\"./ChainlinkLib.sol\\\";\\n\\n// Storage\\nimport {\\n    PriceAggStorageLib,\\n    PriceAggStorage\\n} from \\\"../../storage/price-aggregator.sol\\\";\\n\\ncontract ChainlinkAggFacet is RolesMods {\\n    /**\\n     * @notice It grabs the Chainlink Aggregator contract address for the token pair if it is supported.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     * @return agg The Chainlink Aggregator address.\\n     * @return found whether or not the ChainlinkAggregator exists.\\n     * @return inverse whether or not the values from the Aggregator should be considered inverted.\\n     */\\n    function getChainlinkAggregatorFor(address src, address dst)\\n        external\\n        view\\n        returns (\\n            address agg,\\n            bool found,\\n            bool inverse\\n        )\\n    {\\n        (agg, found, inverse) = ChainlinkLib.aggregatorFor(src, dst);\\n    }\\n\\n    /**\\n     * @dev Checks if a token address is supported by Chainlink (has a pair aggregator).\\n     * @param token Token address to check if is supported.\\n     * @return isSupported_ true if there is at least 1 pair aggregator for {token}\\n     */\\n    function isChainlinkTokenSupported(address token)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return ChainlinkLib.isTokenSupported(token);\\n    }\\n\\n    /**\\n     * @notice It allows for additional Chainlink Aggregators to be supported.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     * @param aggregator Price aggregator address.\\n     */\\n    function addChainlinkAggregator(\\n        address src,\\n        address dst,\\n        address aggregator\\n    ) external authorized(ADMIN, msg.sender) {\\n        (, bool found, ) = ChainlinkLib.aggregatorFor(src, dst);\\n        require(!found, \\\"Teller: chainlink aggregator already exists\\\");\\n        require(Address.isContract(src), \\\"Teller: source token not contract\\\");\\n        require(\\n            Address.isContract(dst),\\n            \\\"Teller: destination token not contract\\\"\\n        );\\n        require(\\n            Address.isContract(aggregator),\\n            \\\"Teller: chainlink aggregator not contract\\\"\\n        );\\n\\n        // Store now aggregator\\n        ChainlinkLib.s().aggregators[src][dst] = aggregator;\\n        // Make sure token addresses are known to be supported\\n        EnumerableSet.add(ChainlinkLib.s().supportedTokens, src);\\n        EnumerableSet.add(ChainlinkLib.s().supportedTokens, dst);\\n        // Increment token pair counts\\n        ChainlinkLib.s().pairCount[src]++;\\n        ChainlinkLib.s().pairCount[dst]++;\\n    }\\n\\n    /**\\n     * @notice It removes support for a Chainlink Aggregator pair.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     */\\n    function removeChainlinkAggregator(address src, address dst)\\n        external\\n        authorized(ADMIN, msg.sender)\\n    {\\n        (, bool found, ) = ChainlinkLib.aggregatorFor(src, dst);\\n        if (!found) {\\n            return;\\n        }\\n\\n        // Delete aggregator storage\\n        delete ChainlinkLib.s().aggregators[src][dst];\\n        // Decrement token pair counts\\n        ChainlinkLib.s().pairCount[src]--;\\n        ChainlinkLib.s().pairCount[dst]--;\\n        // Remove token support if token pair length is 0\\n        if (ChainlinkLib.s().pairCount[src] == 0) {\\n            EnumerableSet.remove(ChainlinkLib.s().supportedTokens, src);\\n        }\\n        if (ChainlinkLib.s().pairCount[dst] == 0) {\\n            EnumerableSet.remove(ChainlinkLib.s().supportedTokens, dst);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa46a001a816c9cf4bc5fa59ab7f54622f661d0dca7b52ed2617feb3807211bbc\",\"license\":\"MIT\"},\"contracts/price-aggregator/chainlink/ChainlinkLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// Storage\\nimport {\\n    PriceAggStorageLib,\\n    ChainlinkAggStorage\\n} from \\\"../../storage/price-aggregator.sol\\\";\\n\\nlibrary ChainlinkLib {\\n    function s() internal view returns (ChainlinkAggStorage storage) {\\n        return PriceAggStorageLib.store().chainlink;\\n    }\\n\\n    /**\\n     * @notice It grabs the Chainlink Aggregator contract address for the token pair if it is supported.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     * @return aggregator The Chainlink Aggregator address.\\n     * @return found whether or not the ChainlinkAggregator exists.\\n     * @return inverse whether or not the values from the Aggregator should be considered inverted.\\n     */\\n    function aggregatorFor(address src, address dst)\\n        internal\\n        view\\n        returns (\\n            address aggregator,\\n            bool found,\\n            bool inverse\\n        )\\n    {\\n        aggregator = s().aggregators[src][dst];\\n        if (aggregator != address(0)) {\\n            found = true;\\n        } else {\\n            aggregator = s().aggregators[dst][src];\\n            if (aggregator != address(0)) {\\n                found = true;\\n                inverse = true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if a token address is supported by Chainlink (has a pair aggregator).\\n     * @param token Token address to check if is supported.\\n     * @return isSupported_ true if there is at least 1 pair aggregator for {token}\\n     */\\n    function isTokenSupported(address token)\\n        internal\\n        view\\n        returns (bool isSupported_)\\n    {\\n        isSupported_ = EnumerableSet.contains(s().supportedTokens, token);\\n    }\\n}\\n\",\"keccak256\":\"0x84fcff4e22dcf0a954794b08f4a5e66cb0b9522a74cccb7d80c07e7032440f42\",\"license\":\"MIT\"},\"contracts/shared/roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev the roles for the user to assign, revoke and check in functions\\n */\\nbytes32 constant ADMIN = keccak256(\\\"ADMIN\\\");\\nbytes32 constant PAUSER = keccak256(\\\"PAUSER\\\");\\nbytes32 constant AUTHORIZED = keccak256(\\\"AUTHORIZED\\\");\\n\",\"keccak256\":\"0x711c08f4fb19dd5c1c76acf9bd08ac1dcd9df9ce143f5195c043d56d4650c8da\",\"license\":\"MIT\"},\"contracts/storage/price-aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ChainlinkAggStorage {\\n    // Maps source token => destination token => Chainlink Aggregator\\n    mapping(address => mapping(address => address)) aggregators;\\n    // Maps token address to number of supported Chainlink pairs\\n    mapping(address => uint256) pairCount;\\n    // Stores set of token addresses supported by Chainlink\\n    EnumerableSet.AddressSet supportedTokens;\\n}\\n\\nstruct PriceAggStorage {\\n    ChainlinkAggStorage chainlink;\\n}\\n\\nbytes32 constant PRICE_AGG_STORAGE_POS = keccak256(\\n    \\\"teller.price.aggregator.storage\\\"\\n);\\n\\nlibrary PriceAggStorageLib {\\n    function store() internal pure returns (PriceAggStorage storage s) {\\n        bytes32 pos = PRICE_AGG_STORAGE_POS;\\n        assembly {\\n            s.slot := pos\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x39a2c6e514cbc48d03f8de560a855527ddf9cd08e2042a75e5c1820a6298d4a1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506109ca806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063020ce3a61461005157806310d94006146100665780638fe2b414146100a5578063961113df146100c8575b600080fd5b61006461005f3660046108c1565b6100db565b005b6100796100743660046108c1565b61029e565b604080516001600160a01b03909416845291151560208401521515908201526060015b60405180910390f35b6100b86100b33660046108a7565b6102bb565b604051901515815260200161009c565b6100646100d63660046108f3565b6102ce565b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec423361010782826105ae565b6101585760405162461bcd60e51b815260206004820152601d60248201527f416363657373436f6e74726f6c3a206e6f7420617574686f72697a656400000060448201526064015b60405180910390fd5b600061016485856105e4565b50915050806101735750610298565b61017b610670565b6001600160a01b03808716600090815260209283526040808220928816825291909252902080546001600160a01b03191690556101b6610670565b6001600160a01b0386166000908152600191909101602052604081208054916101de8361094c565b91905055506101eb610670565b6001600160a01b0385166000908152600191909101602052604081208054916102138361094c565b9190505550610220610670565b6001600160a01b038616600090815260019190910160205260409020546102575761025561024c610670565b60020186610699565b505b61025f610670565b6001600160a01b038516600090815260019190910160205260409020546102965761029461028b610670565b60020185610699565b505b505b50505050565b60008060006102ad85856105e4565b919790965090945092505050565b60006102c6826106b5565b90505b919050565b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336102fa82826105ae565b6103465760405162461bcd60e51b815260206004820152601d60248201527f416363657373436f6e74726f6c3a206e6f7420617574686f72697a6564000000604482015260640161014f565b600061035286866105e4565b5091505080156103b85760405162461bcd60e51b815260206004820152602b60248201527f54656c6c65723a20636861696e6c696e6b2061676772656761746f7220616c7260448201526a656164792065786973747360a81b606482015260840161014f565b853b6104105760405162461bcd60e51b815260206004820152602160248201527f54656c6c65723a20736f7572636520746f6b656e206e6f7420636f6e747261636044820152601d60fa1b606482015260840161014f565b843b61046d5760405162461bcd60e51b815260206004820152602660248201527f54656c6c65723a2064657374696e6174696f6e20746f6b656e206e6f7420636f6044820152651b9d1c9858dd60d21b606482015260840161014f565b833b6104cd5760405162461bcd60e51b815260206004820152602960248201527f54656c6c65723a20636861696e6c696e6b2061676772656761746f72206e6f746044820152680818dbdb9d1c9858dd60ba1b606482015260840161014f565b836104d6610670565b6001600160a01b038881166000908152602092835260408082208a841683529093529190912080546001600160a01b0319169290911691909117905561052661051d610670565b600201876106cb565b5061053b610532610670565b600201866106cb565b50610544610670565b6001600160a01b03871660009081526001919091016020526040812080549161056c83610963565b9190505550610579610670565b6001600160a01b0386166000908152600191909101602052604081208054916105a183610963565b9190505550505050505050565b60006105b86106e0565b6000848152602091825260408082206001600160a01b0386168352909252205460ff1690505b92915050565b60008060006105f1610670565b6001600160a01b0380871660009081526020928352604080822088841683529093529190912054169250821561062a5760019150610669565b610632610670565b6001600160a01b03808616600090815260209283526040808220898416835290935291909120541692508215610669575060019050805b9250925092565b60007f6e580dd31681e426edb2ee1b0c0ecdc390e3129c3a61bf056e0b2c13818dbc0b5b905090565b60006106ae836001600160a01b038416610708565b9392505050565b60006102c66106c2610670565b6002018361081f565b60006106ae836001600160a01b038416610841565b60007f7b305b6be5f275f648d05716597c483d754c2a242bd605feba3c64fb85360534610694565b6000818152600183016020526040812054801561081557600061072c600183610935565b855490915060009061074090600190610935565b9050600086600001828154811061076757634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061079857634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600189019091526040902084905586548790806107d957634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506105de565b60009150506105de565b6001600160a01b038116600090815260018301602052604081205415156106ae565b6000818152600183016020526040812054610888575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105de565b5060006105de565b80356001600160a01b03811681146102c957600080fd5b6000602082840312156108b8578081fd5b6106ae82610890565b600080604083850312156108d3578081fd5b6108dc83610890565b91506108ea60208401610890565b90509250929050565b600080600060608486031215610907578081fd5b61091084610890565b925061091e60208501610890565b915061092c60408501610890565b90509250925092565b6000828210156109475761094761097e565b500390565b60008161095b5761095b61097e565b506000190190565b60006000198214156109775761097761097e565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220344d677326d3e2803cde747b6ad112391bdc24fd12735a5baf1c80586bcc5cf864736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063020ce3a61461005157806310d94006146100665780638fe2b414146100a5578063961113df146100c8575b600080fd5b61006461005f3660046108c1565b6100db565b005b6100796100743660046108c1565b61029e565b604080516001600160a01b03909416845291151560208401521515908201526060015b60405180910390f35b6100b86100b33660046108a7565b6102bb565b604051901515815260200161009c565b6100646100d63660046108f3565b6102ce565b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec423361010782826105ae565b6101585760405162461bcd60e51b815260206004820152601d60248201527f416363657373436f6e74726f6c3a206e6f7420617574686f72697a656400000060448201526064015b60405180910390fd5b600061016485856105e4565b50915050806101735750610298565b61017b610670565b6001600160a01b03808716600090815260209283526040808220928816825291909252902080546001600160a01b03191690556101b6610670565b6001600160a01b0386166000908152600191909101602052604081208054916101de8361094c565b91905055506101eb610670565b6001600160a01b0385166000908152600191909101602052604081208054916102138361094c565b9190505550610220610670565b6001600160a01b038616600090815260019190910160205260409020546102575761025561024c610670565b60020186610699565b505b61025f610670565b6001600160a01b038516600090815260019190910160205260409020546102965761029461028b610670565b60020185610699565b505b505b50505050565b60008060006102ad85856105e4565b919790965090945092505050565b60006102c6826106b5565b90505b919050565b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336102fa82826105ae565b6103465760405162461bcd60e51b815260206004820152601d60248201527f416363657373436f6e74726f6c3a206e6f7420617574686f72697a6564000000604482015260640161014f565b600061035286866105e4565b5091505080156103b85760405162461bcd60e51b815260206004820152602b60248201527f54656c6c65723a20636861696e6c696e6b2061676772656761746f7220616c7260448201526a656164792065786973747360a81b606482015260840161014f565b853b6104105760405162461bcd60e51b815260206004820152602160248201527f54656c6c65723a20736f7572636520746f6b656e206e6f7420636f6e747261636044820152601d60fa1b606482015260840161014f565b843b61046d5760405162461bcd60e51b815260206004820152602660248201527f54656c6c65723a2064657374696e6174696f6e20746f6b656e206e6f7420636f6044820152651b9d1c9858dd60d21b606482015260840161014f565b833b6104cd5760405162461bcd60e51b815260206004820152602960248201527f54656c6c65723a20636861696e6c696e6b2061676772656761746f72206e6f746044820152680818dbdb9d1c9858dd60ba1b606482015260840161014f565b836104d6610670565b6001600160a01b038881166000908152602092835260408082208a841683529093529190912080546001600160a01b0319169290911691909117905561052661051d610670565b600201876106cb565b5061053b610532610670565b600201866106cb565b50610544610670565b6001600160a01b03871660009081526001919091016020526040812080549161056c83610963565b9190505550610579610670565b6001600160a01b0386166000908152600191909101602052604081208054916105a183610963565b9190505550505050505050565b60006105b86106e0565b6000848152602091825260408082206001600160a01b0386168352909252205460ff1690505b92915050565b60008060006105f1610670565b6001600160a01b0380871660009081526020928352604080822088841683529093529190912054169250821561062a5760019150610669565b610632610670565b6001600160a01b03808616600090815260209283526040808220898416835290935291909120541692508215610669575060019050805b9250925092565b60007f6e580dd31681e426edb2ee1b0c0ecdc390e3129c3a61bf056e0b2c13818dbc0b5b905090565b60006106ae836001600160a01b038416610708565b9392505050565b60006102c66106c2610670565b6002018361081f565b60006106ae836001600160a01b038416610841565b60007f7b305b6be5f275f648d05716597c483d754c2a242bd605feba3c64fb85360534610694565b6000818152600183016020526040812054801561081557600061072c600183610935565b855490915060009061074090600190610935565b9050600086600001828154811061076757634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061079857634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600189019091526040902084905586548790806107d957634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506105de565b60009150506105de565b6001600160a01b038116600090815260018301602052604081205415156106ae565b6000818152600183016020526040812054610888575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105de565b5060006105de565b80356001600160a01b03811681146102c957600080fd5b6000602082840312156108b8578081fd5b6106ae82610890565b600080604083850312156108d3578081fd5b6108dc83610890565b91506108ea60208401610890565b90509250929050565b600080600060608486031215610907578081fd5b61091084610890565b925061091e60208501610890565b915061092c60408501610890565b90509250925092565b6000828210156109475761094761097e565b500390565b60008161095b5761095b61097e565b506000190190565b60006000198214156109775761097761097e565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220344d677326d3e2803cde747b6ad112391bdc24fd12735a5baf1c80586bcc5cf864736f6c63430008030033",
  "history": [
    {
      "address": "0x7f05e46146F9D3cF2086633E43C1302116F7190D",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "src",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dst",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "aggregator",
              "type": "address"
            }
          ],
          "name": "addChainlinkAggregator",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "src",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dst",
              "type": "address"
            }
          ],
          "name": "getChainlinkAggregatorFor",
          "outputs": [
            {
              "internalType": "address",
              "name": "agg",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "found",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "inverse",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "isChainlinkTokenSupported",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "src",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dst",
              "type": "address"
            }
          ],
          "name": "removeChainlinkAggregator",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "artifactName": "ChainlinkAggFacet",
      "transactionHash": "0x8aeeca876fe890ef54d0594ddf5fd467fd7a91d7ec048c22ed0baba164c1e289",
      "receipt": {
        "to": null,
        "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
        "contractAddress": "0x7f05e46146F9D3cF2086633E43C1302116F7190D",
        "transactionIndex": 0,
        "gasUsed": "594205",
        "logsBloom": "0x
        "blockHash": "0x5be008b85988b72234bf710709d8ae03223d5562725da5a0c0b94b77716ead37",
        "transactionHash": "0x8aeeca876fe890ef54d0594ddf5fd467fd7a91d7ec048c22ed0baba164c1e289",
        "logs": [],
        "blockNumber": 25103783,
        "cumulativeGasUsed": "594205",
        "status": 1,
        "byzantium": true
      },
      "args": [],
      "solcInputHash": "dc3b3c0336b59a4fae33a8cd036a81b5",
      "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"addChainlinkAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"getChainlinkAggregatorFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agg\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"found\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inverse\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isChainlinkTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"removeChainlinkAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addChainlinkAggregator(address,address,address)\":{\"params\":{\"aggregator\":\"Price aggregator address.\",\"dst\":\"Destination token address.\",\"src\":\"Source token address.\"}},\"getChainlinkAggregatorFor(address,address)\":{\"params\":{\"dst\":\"Destination token address.\",\"src\":\"Source token address.\"},\"returns\":{\"agg\":\"The Chainlink Aggregator address.\",\"found\":\"whether or not the ChainlinkAggregator exists.\",\"inverse\":\"whether or not the values from the Aggregator should be considered inverted.\"}},\"isChainlinkTokenSupported(address)\":{\"details\":\"Checks if a token address is supported by Chainlink (has a pair aggregator).\",\"params\":{\"token\":\"Token address to check if is supported.\"},\"returns\":{\"_0\":\"isSupported_ true if there is at least 1 pair aggregator for {token}\"}},\"removeChainlinkAggregator(address,address)\":{\"params\":{\"dst\":\"Destination token address.\",\"src\":\"Source token address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addChainlinkAggregator(address,address,address)\":{\"notice\":\"It allows for additional Chainlink Aggregators to be supported.\"},\"getChainlinkAggregatorFor(address,address)\":{\"notice\":\"It grabs the Chainlink Aggregator contract address for the token pair if it is supported.\"},\"removeChainlinkAggregator(address,address)\":{\"notice\":\"It removes support for a Chainlink Aggregator pair.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/price-aggregator/chainlink/ChainlinkAggFacet.sol\":\"ChainlinkAggFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x4878ef6c288f4cef3c2a288d32cc548c648831cc55503ad3d9a581ed3b93aad9\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/roles/RolesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AccessControlStorageLib, AccessControlStorage } from \\\"../storage.sol\\\";\\n\\nlibrary RolesLib {\\n    function s() private pure returns (AccessControlStorage storage) {\\n        return AccessControlStorageLib.store();\\n    }\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @notice Checks if an account has a specific role.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return s().roles[role][account];\\n    }\\n\\n    /**\\n     * @dev Gives an account a new role.\\n     * @dev Should only use when circumventing admin checking.\\n     * @dev If account already has the role, no event is emitted.\\n     * @param role Encoding of the role to give.\\n     * @param account Address to give the {role} to.\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) return;\\n        s().roles[role][account] = true;\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Removes a role from an account.\\n     * @dev Should only use when circumventing admin checking.\\n     * @dev If account does not already have the role, no event is emitted.\\n     * @param role Encoding of the role to remove.\\n     * @param account Address to remove the {role} from.\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) return;\\n        s().roles[role][account] = false;\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x36d0f5db441d2c3db7ee04d84c88ce9b14251cff4387702e96965c51acd1bc84\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/roles/RolesMods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { RolesLib } from \\\"./RolesLib.sol\\\";\\n\\nabstract contract RolesMods {\\n    /**\\n     * @notice Requires that the {account} has {role}\\n     * @param role Encoding of the role to check.\\n     * @param account Address to check the {role} for.\\n     */\\n    modifier authorized(bytes32 role, address account) {\\n        require(\\n            RolesLib.hasRole(role, account),\\n            \\\"AccessControl: not authorized\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x25eeaba823d4fc9c52d82a77cfdb409550ad985fc49b30a5560c1f313c1ca905\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct AccessControlStorage {\\n    mapping(bytes32 => mapping(address => bool)) roles;\\n    mapping(address => address) owners;\\n    mapping(bytes32 => bool) entered;\\n}\\n\\nbytes32 constant ACCESS_CONTROL_POS = keccak256(\\n    \\\"teller.access_control.storage\\\"\\n);\\n\\nlibrary AccessControlStorageLib {\\n    function store() internal pure returns (AccessControlStorage storage s) {\\n        bytes32 pos = ACCESS_CONTROL_POS;\\n        assembly {\\n            s.slot := pos\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf667fb8d6beb59fc6f37d60ada6b811b5861512fedc661c483b9eca042e96112\",\"license\":\"MIT\"},\"contracts/price-aggregator/chainlink/ChainlinkAggFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport { RolesMods } from \\\"../../contexts2/access-control/roles/RolesMods.sol\\\";\\nimport { ADMIN } from \\\"../../shared/roles.sol\\\";\\n\\n// Libraries\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { ChainlinkLib } from \\\"./ChainlinkLib.sol\\\";\\n\\n// Storage\\nimport {\\n    PriceAggStorageLib,\\n    PriceAggStorage\\n} from \\\"../../storage/price-aggregator.sol\\\";\\n\\ncontract ChainlinkAggFacet is RolesMods {\\n    /**\\n     * @notice It grabs the Chainlink Aggregator contract address for the token pair if it is supported.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     * @return agg The Chainlink Aggregator address.\\n     * @return found whether or not the ChainlinkAggregator exists.\\n     * @return inverse whether or not the values from the Aggregator should be considered inverted.\\n     */\\n    function getChainlinkAggregatorFor(address src, address dst)\\n        external\\n        view\\n        returns (\\n            address agg,\\n            bool found,\\n            bool inverse\\n        )\\n    {\\n        (agg, found, inverse) = ChainlinkLib.aggregatorFor(src, dst);\\n    }\\n\\n    /**\\n     * @dev Checks if a token address is supported by Chainlink (has a pair aggregator).\\n     * @param token Token address to check if is supported.\\n     * @return isSupported_ true if there is at least 1 pair aggregator for {token}\\n     */\\n    function isChainlinkTokenSupported(address token)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return ChainlinkLib.isTokenSupported(token);\\n    }\\n\\n    /**\\n     * @notice It allows for additional Chainlink Aggregators to be supported.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     * @param aggregator Price aggregator address.\\n     */\\n    function addChainlinkAggregator(\\n        address src,\\n        address dst,\\n        address aggregator\\n    ) external authorized(ADMIN, msg.sender) {\\n        (, bool found, ) = ChainlinkLib.aggregatorFor(src, dst);\\n        require(!found, \\\"Teller: chainlink aggregator already exists\\\");\\n        require(Address.isContract(src), \\\"Teller: source token not contract\\\");\\n        require(\\n            Address.isContract(dst),\\n            \\\"Teller: destination token not contract\\\"\\n        );\\n        require(\\n            Address.isContract(aggregator),\\n            \\\"Teller: chainlink aggregator not contract\\\"\\n        );\\n\\n        // Store now aggregator\\n        ChainlinkLib.s().aggregators[src][dst] = aggregator;\\n        // Make sure token addresses are known to be supported\\n        EnumerableSet.add(ChainlinkLib.s().supportedTokens, src);\\n        EnumerableSet.add(ChainlinkLib.s().supportedTokens, dst);\\n        // Increment token pair counts\\n        ChainlinkLib.s().pairCount[src]++;\\n        ChainlinkLib.s().pairCount[dst]++;\\n    }\\n\\n    /**\\n     * @notice It removes support for a Chainlink Aggregator pair.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     */\\n    function removeChainlinkAggregator(address src, address dst)\\n        external\\n        authorized(ADMIN, msg.sender)\\n    {\\n        (, bool found, ) = ChainlinkLib.aggregatorFor(src, dst);\\n        if (!found) {\\n            return;\\n        }\\n\\n        // Delete aggregator storage\\n        delete ChainlinkLib.s().aggregators[src][dst];\\n        // Decrement token pair counts\\n        ChainlinkLib.s().pairCount[src]--;\\n        ChainlinkLib.s().pairCount[dst]--;\\n        // Remove token support if token pair length is 0\\n        if (ChainlinkLib.s().pairCount[src] == 0) {\\n            EnumerableSet.remove(ChainlinkLib.s().supportedTokens, src);\\n        }\\n        if (ChainlinkLib.s().pairCount[dst] == 0) {\\n            EnumerableSet.remove(ChainlinkLib.s().supportedTokens, dst);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa46a001a816c9cf4bc5fa59ab7f54622f661d0dca7b52ed2617feb3807211bbc\",\"license\":\"MIT\"},\"contracts/price-aggregator/chainlink/ChainlinkLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// Storage\\nimport {\\n    PriceAggStorageLib,\\n    ChainlinkAggStorage\\n} from \\\"../../storage/price-aggregator.sol\\\";\\n\\nlibrary ChainlinkLib {\\n    function s() internal view returns (ChainlinkAggStorage storage) {\\n        return PriceAggStorageLib.store().chainlink;\\n    }\\n\\n    /**\\n     * @notice It grabs the Chainlink Aggregator contract address for the token pair if it is supported.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     * @return aggregator The Chainlink Aggregator address.\\n     * @return found whether or not the ChainlinkAggregator exists.\\n     * @return inverse whether or not the values from the Aggregator should be considered inverted.\\n     */\\n    function aggregatorFor(address src, address dst)\\n        internal\\n        view\\n        returns (\\n            address aggregator,\\n            bool found,\\n            bool inverse\\n        )\\n    {\\n        aggregator = s().aggregators[src][dst];\\n        if (aggregator != address(0)) {\\n            found = true;\\n        } else {\\n            aggregator = s().aggregators[dst][src];\\n            if (aggregator != address(0)) {\\n                found = true;\\n                inverse = true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if a token address is supported by Chainlink (has a pair aggregator).\\n     * @param token Token address to check if is supported.\\n     * @return isSupported_ true if there is at least 1 pair aggregator for {token}\\n     */\\n    function isTokenSupported(address token)\\n        internal\\n        view\\n        returns (bool isSupported_)\\n    {\\n        isSupported_ = EnumerableSet.contains(s().supportedTokens, token);\\n    }\\n}\\n\",\"keccak256\":\"0x84fcff4e22dcf0a954794b08f4a5e66cb0b9522a74cccb7d80c07e7032440f42\",\"license\":\"MIT\"},\"contracts/shared/roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nbytes32 constant ADMIN = keccak256(\\\"ADMIN\\\");\\nbytes32 constant PAUSER = keccak256(\\\"PAUSER\\\");\\nbytes32 constant AUTHORIZED = keccak256(\\\"AUTHORIZED\\\");\\n\",\"keccak256\":\"0x0888cf40ea019be9f0ee94cb8af1e030454c28f8c6512db9d89ed027fe21f18f\",\"license\":\"MIT\"},\"contracts/storage/price-aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ChainlinkAggStorage {\\n    // Maps source token => destination token => Chainlink Aggregator\\n    mapping(address => mapping(address => address)) aggregators;\\n    // Maps token address to number of supported Chainlink pairs\\n    mapping(address => uint256) pairCount;\\n    // Stores set of token addresses supported by Chainlink\\n    EnumerableSet.AddressSet supportedTokens;\\n}\\n\\nstruct PriceAggStorage {\\n    ChainlinkAggStorage chainlink;\\n}\\n\\nbytes32 constant PRICE_AGG_STORAGE_POS = keccak256(\\n    \\\"teller.price.aggregator.storage\\\"\\n);\\n\\nlibrary PriceAggStorageLib {\\n    function store() internal pure returns (PriceAggStorage storage s) {\\n        bytes32 pos = PRICE_AGG_STORAGE_POS;\\n        assembly {\\n            s.slot := pos\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x39a2c6e514cbc48d03f8de560a855527ddf9cd08e2042a75e5c1820a6298d4a1\",\"license\":\"MIT\"}},\"version\":1}",
      "bytecode": "0x608060405234801561001057600080fd5b506109ca806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063020ce3a61461005157806310d94006146100665780638fe2b414146100a5578063961113df146100c8575b600080fd5b61006461005f3660046108c1565b6100db565b005b6100796100743660046108c1565b61029e565b604080516001600160a01b03909416845291151560208401521515908201526060015b60405180910390f35b6100b86100b33660046108a7565b6102bb565b604051901515815260200161009c565b6100646100d63660046108f3565b6102ce565b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec423361010782826105ae565b6101585760405162461bcd60e51b815260206004820152601d60248201527f416363657373436f6e74726f6c3a206e6f7420617574686f72697a656400000060448201526064015b60405180910390fd5b600061016485856105e4565b50915050806101735750610298565b61017b610670565b6001600160a01b03808716600090815260209283526040808220928816825291909252902080546001600160a01b03191690556101b6610670565b6001600160a01b0386166000908152600191909101602052604081208054916101de8361094c565b91905055506101eb610670565b6001600160a01b0385166000908152600191909101602052604081208054916102138361094c565b9190505550610220610670565b6001600160a01b038616600090815260019190910160205260409020546102575761025561024c610670565b60020186610699565b505b61025f610670565b6001600160a01b038516600090815260019190910160205260409020546102965761029461028b610670565b60020185610699565b505b505b50505050565b60008060006102ad85856105e4565b919790965090945092505050565b60006102c6826106b5565b90505b919050565b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336102fa82826105ae565b6103465760405162461bcd60e51b815260206004820152601d60248201527f416363657373436f6e74726f6c3a206e6f7420617574686f72697a6564000000604482015260640161014f565b600061035286866105e4565b5091505080156103b85760405162461bcd60e51b815260206004820152602b60248201527f54656c6c65723a20636861696e6c696e6b2061676772656761746f7220616c7260448201526a656164792065786973747360a81b606482015260840161014f565b853b6104105760405162461bcd60e51b815260206004820152602160248201527f54656c6c65723a20736f7572636520746f6b656e206e6f7420636f6e747261636044820152601d60fa1b606482015260840161014f565b843b61046d5760405162461bcd60e51b815260206004820152602660248201527f54656c6c65723a2064657374696e6174696f6e20746f6b656e206e6f7420636f6044820152651b9d1c9858dd60d21b606482015260840161014f565b833b6104cd5760405162461bcd60e51b815260206004820152602960248201527f54656c6c65723a20636861696e6c696e6b2061676772656761746f72206e6f746044820152680818dbdb9d1c9858dd60ba1b606482015260840161014f565b836104d6610670565b6001600160a01b038881166000908152602092835260408082208a841683529093529190912080546001600160a01b0319169290911691909117905561052661051d610670565b600201876106cb565b5061053b610532610670565b600201866106cb565b50610544610670565b6001600160a01b03871660009081526001919091016020526040812080549161056c83610963565b9190505550610579610670565b6001600160a01b0386166000908152600191909101602052604081208054916105a183610963565b9190505550505050505050565b60006105b86106e0565b6000848152602091825260408082206001600160a01b0386168352909252205460ff1690505b92915050565b60008060006105f1610670565b6001600160a01b0380871660009081526020928352604080822088841683529093529190912054169250821561062a5760019150610669565b610632610670565b6001600160a01b03808616600090815260209283526040808220898416835290935291909120541692508215610669575060019050805b9250925092565b60007f6e580dd31681e426edb2ee1b0c0ecdc390e3129c3a61bf056e0b2c13818dbc0b5b905090565b60006106ae836001600160a01b038416610708565b9392505050565b60006102c66106c2610670565b6002018361081f565b60006106ae836001600160a01b038416610841565b60007f7b305b6be5f275f648d05716597c483d754c2a242bd605feba3c64fb85360534610694565b6000818152600183016020526040812054801561081557600061072c600183610935565b855490915060009061074090600190610935565b9050600086600001828154811061076757634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061079857634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600189019091526040902084905586548790806107d957634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506105de565b60009150506105de565b6001600160a01b038116600090815260018301602052604081205415156106ae565b6000818152600183016020526040812054610888575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105de565b5060006105de565b80356001600160a01b03811681146102c957600080fd5b6000602082840312156108b8578081fd5b6106ae82610890565b600080604083850312156108d3578081fd5b6108dc83610890565b91506108ea60208401610890565b90509250929050565b600080600060608486031215610907578081fd5b61091084610890565b925061091e60208501610890565b915061092c60408501610890565b90509250925092565b6000828210156109475761094761097e565b500390565b60008161095b5761095b61097e565b506000190190565b60006000198214156109775761097761097e565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212201c59dff225c1dcf8bb8f0e1aa2fe15c62cb5068f6d8e9f8d52cdb2588790580e64736f6c63430008030033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063020ce3a61461005157806310d94006146100665780638fe2b414146100a5578063961113df146100c8575b600080fd5b61006461005f3660046108c1565b6100db565b005b6100796100743660046108c1565b61029e565b604080516001600160a01b03909416845291151560208401521515908201526060015b60405180910390f35b6100b86100b33660046108a7565b6102bb565b604051901515815260200161009c565b6100646100d63660046108f3565b6102ce565b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec423361010782826105ae565b6101585760405162461bcd60e51b815260206004820152601d60248201527f416363657373436f6e74726f6c3a206e6f7420617574686f72697a656400000060448201526064015b60405180910390fd5b600061016485856105e4565b50915050806101735750610298565b61017b610670565b6001600160a01b03808716600090815260209283526040808220928816825291909252902080546001600160a01b03191690556101b6610670565b6001600160a01b0386166000908152600191909101602052604081208054916101de8361094c565b91905055506101eb610670565b6001600160a01b0385166000908152600191909101602052604081208054916102138361094c565b9190505550610220610670565b6001600160a01b038616600090815260019190910160205260409020546102575761025561024c610670565b60020186610699565b505b61025f610670565b6001600160a01b038516600090815260019190910160205260409020546102965761029461028b610670565b60020185610699565b505b505b50505050565b60008060006102ad85856105e4565b919790965090945092505050565b60006102c6826106b5565b90505b919050565b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336102fa82826105ae565b6103465760405162461bcd60e51b815260206004820152601d60248201527f416363657373436f6e74726f6c3a206e6f7420617574686f72697a6564000000604482015260640161014f565b600061035286866105e4565b5091505080156103b85760405162461bcd60e51b815260206004820152602b60248201527f54656c6c65723a20636861696e6c696e6b2061676772656761746f7220616c7260448201526a656164792065786973747360a81b606482015260840161014f565b853b6104105760405162461bcd60e51b815260206004820152602160248201527f54656c6c65723a20736f7572636520746f6b656e206e6f7420636f6e747261636044820152601d60fa1b606482015260840161014f565b843b61046d5760405162461bcd60e51b815260206004820152602660248201527f54656c6c65723a2064657374696e6174696f6e20746f6b656e206e6f7420636f6044820152651b9d1c9858dd60d21b606482015260840161014f565b833b6104cd5760405162461bcd60e51b815260206004820152602960248201527f54656c6c65723a20636861696e6c696e6b2061676772656761746f72206e6f746044820152680818dbdb9d1c9858dd60ba1b606482015260840161014f565b836104d6610670565b6001600160a01b038881166000908152602092835260408082208a841683529093529190912080546001600160a01b0319169290911691909117905561052661051d610670565b600201876106cb565b5061053b610532610670565b600201866106cb565b50610544610670565b6001600160a01b03871660009081526001919091016020526040812080549161056c83610963565b9190505550610579610670565b6001600160a01b0386166000908152600191909101602052604081208054916105a183610963565b9190505550505050505050565b60006105b86106e0565b6000848152602091825260408082206001600160a01b0386168352909252205460ff1690505b92915050565b60008060006105f1610670565b6001600160a01b0380871660009081526020928352604080822088841683529093529190912054169250821561062a5760019150610669565b610632610670565b6001600160a01b03808616600090815260209283526040808220898416835290935291909120541692508215610669575060019050805b9250925092565b60007f6e580dd31681e426edb2ee1b0c0ecdc390e3129c3a61bf056e0b2c13818dbc0b5b905090565b60006106ae836001600160a01b038416610708565b9392505050565b60006102c66106c2610670565b6002018361081f565b60006106ae836001600160a01b038416610841565b60007f7b305b6be5f275f648d05716597c483d754c2a242bd605feba3c64fb85360534610694565b6000818152600183016020526040812054801561081557600061072c600183610935565b855490915060009061074090600190610935565b9050600086600001828154811061076757634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061079857634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600189019091526040902084905586548790806107d957634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506105de565b60009150506105de565b6001600160a01b038116600090815260018301602052604081205415156106ae565b6000818152600183016020526040812054610888575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105de565b5060006105de565b80356001600160a01b03811681146102c957600080fd5b6000602082840312156108b8578081fd5b6106ae82610890565b600080604083850312156108d3578081fd5b6108dc83610890565b91506108ea60208401610890565b90509250929050565b600080600060608486031215610907578081fd5b61091084610890565b925061091e60208501610890565b915061092c60408501610890565b90509250925092565b6000828210156109475761094761097e565b500390565b60008161095b5761095b61097e565b506000190190565b60006000198214156109775761097761097e565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212201c59dff225c1dcf8bb8f0e1aa2fe15c62cb5068f6d8e9f8d52cdb2588790580e64736f6c63430008030033",
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addChainlinkAggregator(address,address,address)": {
            "params": {
              "aggregator": "Price aggregator address.",
              "dst": "Destination token address.",
              "src": "Source token address."
            }
          },
          "getChainlinkAggregatorFor(address,address)": {
            "params": {
              "dst": "Destination token address.",
              "src": "Source token address."
            },
            "returns": {
              "agg": "The Chainlink Aggregator address.",
              "found": "whether or not the ChainlinkAggregator exists.",
              "inverse": "whether or not the values from the Aggregator should be considered inverted."
            }
          },
          "isChainlinkTokenSupported(address)": {
            "details": "Checks if a token address is supported by Chainlink (has a pair aggregator).",
            "params": {
              "token": "Token address to check if is supported."
            },
            "returns": {
              "_0": "isSupported_ true if there is at least 1 pair aggregator for {token}"
            }
          },
          "removeChainlinkAggregator(address,address)": {
            "params": {
              "dst": "Destination token address.",
              "src": "Source token address."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addChainlinkAggregator(address,address,address)": {
            "notice": "It allows for additional Chainlink Aggregators to be supported."
          },
          "getChainlinkAggregatorFor(address,address)": {
            "notice": "It grabs the Chainlink Aggregator contract address for the token pair if it is supported."
          },
          "removeChainlinkAggregator(address,address)": {
            "notice": "It removes support for a Chainlink Aggregator pair."
          }
        },
        "version": 1
      },
      "storageLayout": {
        "storage": [],
        "types": null
      }
    }
  ],
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addChainlinkAggregator(address,address,address)": {
        "params": {
          "aggregator": "Price aggregator address.",
          "dst": "Destination token address.",
          "src": "Source token address."
        }
      },
      "getChainlinkAggregatorFor(address,address)": {
        "params": {
          "dst": "Destination token address.",
          "src": "Source token address."
        },
        "returns": {
          "agg": "The Chainlink Aggregator address.",
          "found": "whether or not the ChainlinkAggregator exists.",
          "inverse": "whether or not the values from the Aggregator should be considered inverted."
        }
      },
      "isChainlinkTokenSupported(address)": {
        "details": "Checks if a token address is supported by Chainlink (has a pair aggregator).",
        "params": {
          "token": "Token address to check if is supported."
        },
        "returns": {
          "_0": "isSupported_ true if there is at least 1 pair aggregator for {token}"
        }
      },
      "removeChainlinkAggregator(address,address)": {
        "params": {
          "dst": "Destination token address.",
          "src": "Source token address."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addChainlinkAggregator(address,address,address)": {
        "notice": "It allows for additional Chainlink Aggregators to be supported."
      },
      "getChainlinkAggregatorFor(address,address)": {
        "notice": "It grabs the Chainlink Aggregator contract address for the token pair if it is supported."
      },
      "removeChainlinkAggregator(address,address)": {
        "notice": "It removes support for a Chainlink Aggregator pair."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
